.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Seismogram::Util 3"
.TH Seismogram::Util 3 "2018-12-19" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
util.pl \- a set of commonly needed routines
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    require "util.pl";
\&
\&    See routine descriptions below
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains a few handy utility codes that compress and uncompress
files, convert associative arrays to normal arrays and vice versa, and get
the path of a filename.
.SH "ROUTINES"
.IX Header "ROUTINES"
.SS "compress"
.IX Subsection "compress"
Compress file using program determined by the filename extension passed
.PP
Arguments:
.PP
.Vb 1
\&    $filename     \- name of the uncompressed file
\&
\&    $extension    \- filename extension to be mapped to the compression
\&                    code. The extension should *not* have a leading 
\&                    period (.)
.Ve
.PP
Return:
.PP
.Vb 1
\&    $status       \- return value of the system call
.Ve
.SS "uncompress"
.IX Subsection "uncompress"
Uncompress file using program determined by the filename extension
.PP
Argument:
.PP
.Vb 1
\&    $filename     \- name of the compressed file
.Ve
.PP
Return:
.PP
.Vb 2
\&    $status       \- return value of the system call (a multiple of 256).
\&                    If filename extension is unknown, returns \-256
\&
\&    $filename     \- name of uncompressed file if decompress was successful.
\&                    Otherwise, the original value of $filename.
.Ve
.PP
Problem:
.PP
.Vb 1
\&    will spew error message if the file does not exist
.Ve
.SS "getpath"
.IX Subsection "getpath"
Separate the path from filename in the given string. If the string
ends in /, the file name is undefined.
.PP
Argument:
.PP
.Vb 1
\&    $filename     \- name of file including the path
.Ve
.PP
Return:
.PP
.Vb 2
\&    $path         \- the path in $filename
\&    $file         \- the file in $filename, without the path
.Ve
.SS "assoc2normal"
.IX Subsection "assoc2normal"
Convert an associative array to a normal array with the normal 
array organized according to an \*(L"order array\*(R"
.PP
Arguments:
.PP
.Vb 2
\&    $associative  \- reference to the original associative array
\&    $order        \- reference to a normal array of the keys in order
.Ve
.PP
Return:
.PP
.Vb 1
\&    @normal       \- the normal array with values from %$associative
.Ve
.PP
Comments:
.PP
.Vb 3
\&    The values of array @$order are the same keys as the original
\&    array %associative. The keys are stored in @$order in the order the
\&    values of %$associative values should go into @normal
\&
\&    Any key, value pairs in %$associative that do not have a
\&    corresponding key in @$order will be skipped (this is intentional)
.Ve
.SS "normal2assoc"
.IX Subsection "normal2assoc"
Convert a normal array to an associative array organized by an \*(L"order\*(R" array.
Keys for the associative array are taken from the order array.
.PP
Arguments:
.PP
.Vb 2
\&    $normal       \- reference to the original normal array
\&    $order        \- reference to the "order" normal array
.Ve
.PP
Return:
.PP
.Vb 1
\&    %associative  \- the associative array of values from @$normal
.Ve
.PP
Comment:
.PP
.Vb 2
\&    This subroutine is the reverse of assoc2normal.  The same @$order array 
\&    is used for both routines.
.Ve
.SS "merge"
.IX Subsection "merge"
Merge two normal arrays by alternately pushing values of the two arrays
into the output array.
.PP
Arguments:
.PP
.Vb 2
\&    $first        \- reference to a normal array
\&    $second       \- reference to a normal array
.Ve
.PP
Return:
.PP
.Vb 1
\&    @output       \- a normal array
.Ve
.SH "VERSION"
.IX Header "VERSION"
1.2
.SH "AUTHOR"
.IX Header "AUTHOR"
Craig Scrivner
