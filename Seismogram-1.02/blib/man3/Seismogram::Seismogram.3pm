.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Seismogram::Seismogram 3pm"
.TH Seismogram::Seismogram 3pm "2019-01-22" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Seismogram::Seismogram \- base class for seismogram objects
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module defines methods shared by a set of seismogram classes.
.PP
Normally, this package is not imported directly by the user.  Instead,
the package for a specific seismogram format (\s-1SAC\s0 or Helm) is imported.
The specific format packages import Seismogram::Seismogram for the
generic seismogram functions.
.PP
Note that a single seismogram object can contain multiple records
containing distinct headers and waveforms.  Some seismogram formats
naturally contain multiple records (i.e., synthetics in Helm format), 
and others tend to contain only a single record (i.e., \s-1SAC\s0 format).
.PP
The generic functions in this module include methods to access and change 
the headers and waveforms of a seismogram object, to pack multiple objects 
into a single seismogram object, and to unpack a single seismogram object
into multiple objects.
.SH "METHODS"
.IX Header "METHODS"
The following are 'public' methods, which are the intended \s-1API\s0 of this
module.  In addition, there are a few 'private' methods which are
intended only for internal module use, and which are not described here.
.PP
Where a method refers to a Seismogram object, this means an object created
by a \fBnew\fR command from one of the packages for a specific seismgram
format.
.SS "Fetch"
.IX Subsection "Fetch"
.Vb 2
\&    Retrieve the values of one or more header variables from a seismogram
\&    object.  Note the values are returned in ARRAY context.
\&
\&    Usage: @values = $gram\->Fetch(@header);
\&
\&    Arguments:
\&
\&        $gram   \- a Seismogram object
\&        @header \- header variable names, see below
\&
\&    Returns:
\&
\&        @values \- values of header variables
.Ve
.SS "Change"
.IX Subsection "Change"
.Vb 1
\&    Set the values of one or more header variables of a seismogram object.
\&
\&    Usage: $gram\->Change(%header);
\&
\&    Arguments:
\&
\&        $gram    \- a Seismogram object
\&        %header  \- a list of key => value pairs, where the key is a
\&                   header variable name.
.Ve
.SS "Split"
.IX Subsection "Split"
.Vb 2
\&    Split a seismogram object with multiple records into an array of
\&    seismogram objects.
\&
\&    Usage: @objects = Split $class ($gram [, $number]);
\&
\&    Arguments:
\&
\&        $class   \- the class of the output objects (i.e., Seismogram::SAC
\&                   or Seismogram::Helm)
\&        $gram    \- a Seismogram object
\&        $number  \- (optional) number of new objects to be formed. The
\&                   default is to split the object up into single record
\&                   objects. Passing a smaller value for $number will
\&                   produce $number \- 1 single record objects and one
\&                   multi\-record object.
\&
\&    Returns:
\&
\&        @objects \- an array of seismogram objects
.Ve
.SS "Join"
.IX Subsection "Join"
.Vb 1
\&    Combine a set of seismogram objects into a single seismogram object.
\&
\&    Usage: $gram = Join $class (@objects);
\&
\&    Arguments:
\&
\&        $class   \- the class of the output object
\&        @objects \- an array of seismogram objects
\&
\&    Returns:
\&
\&        $gram    \- the output seismogram object
.Ve
.SS "Mech"
.IX Subsection "Mech"
.Vb 3
\&    Apply double\-couple source parameters to a set of synthetic
\&    waveforms to generate radial, tangential, and vertical component
\&    records.
\&
\&    Usage: %components = Mech $class ($traces,$strike,$rake,$dip,$azimuth);
\&
\&    Arguments:
\&
\&        $class   \- the class of the output objects
\&        $traces  \- reference to an associative array containing seismogram
\&                   objects.  The keys of the associative array indicate
\&                   the component and fault orientation of the synthetic
\&                   waveform:
\&
\&                   tss \- tangential component, vertical strike\-slip fault
\&                   tds \- tangential component, vertical dip\-slip fault
\&                   xss \- radial component, vertical strike\-slip fault
\&                   xds \- radial component, vertical dip\-slip fault
\&                   xdd \- radial component, 45 degree dip\-slip fault
\&                   zss \- vertical component, vertical strike\-slip fault
\&                   zds \- vertical component, vertical dip\-slip fault
\&                   zdd \- vertical component, 45 degree dip\-slip fault
\&
\&        $strike  \- strike of fault
\&        $rake    \- rake of slip on fault
\&        $dip     \- dip of fault from horizontal
\&        $azimuth \- azimuth of receiver from source, in degrees from North
\&
\&    Returns:
\&
\&        %components \- associative array containing output seismogram
\&                      objects.  The keys of the array are \*(Aqtan\*(Aq,\*(Aqrad\*(Aq, and
\&                      \*(Aqver\*(Aq, indicating the three components of the output
\&                      synthetic. If one or more of the input waveforms for
\&                      a particular component were missing, then \*(Aqundef\*(Aq is
\&                      is returned for that component.
.Ve
.SS "\s-1AUTOLOAD\s0"
.IX Subsection "AUTOLOAD"
.Vb 4
\&    Any header variable name can be used as a function name to retrieve
\&    or change the corresponding header value.  This is syntactic sugar
\&    for the methods Fetch and Change when only one header variable
\&    is being accessed.
\&
\&    Referencing the header variable name without passing an argument will 
\&    return the variable value (like Fetch).  Passing an argument will 
\&    change the variable to that value (like Change).
\&
\&    This is most easily demonstrated with some examples:
\&
\&        $npts = $gram\->npts; # same as $gram\->Fetch(\*(Aqnpts\*(Aq);
\&        $gram\->npts(2500);   # same as $gram\->Change(\*(Aqnpts\*(Aq,2500);
\&
\&    Note that the value is returned in SCALAR context.  This handy,
\&    but it is different from the normal Fetch behavior.
.Ve
.SH "HEADER VARIABLE NAMES"
.IX Header "HEADER VARIABLE NAMES"
The Fetch and Change methods take 'header variable name' arguments
which are strings refering to values stored in the seismogram header.
Examples of the more commonly referenced header values are 'npts' and 'dt'.
In seismogram objects containing multiple records, header values are
indexed (starting from 0) as 'npts\-i', where 'i' is the index value for a
given record.  A header variable name without the explicit indexing (i.e.,
\&'npts') defaults to the 0 index.  Therefore header values of seismogram 
objects with only one record can always be referenced without the index.
.PP
While the names of some of the more important of these header variables are
shared by different types of seismogram objects, the bulk of them will be
defined only for a given seismogram format.
.PP
Some flexibility is introduced to the header variable names by a set of
proxies defined in this module.  For example, both 'delta' and 'dt' will
return the time increment of waveforms.  Similarly the \s-1SAC\s0 header date
variables 'nzyear', 'nzmin', etc. can be accessed with 'year', 'min', etc.
The basic idea of the proxies is to use the accurate header variable names
for a format when possible, but if you slip up, some of the more common
variants will work as well.
.PP
In addition, you can introduce header values with tags of your own using
the Change method, but unless they are defined for a format they will
not be written to file during a Write operation.
.PP
See the documentation of the modules for specific seismogram formats for
a complete list of header variable names for that format.
.SH "ACCESSING DATA"
.IX Header "ACCESSING DATA"
Passing 'data\-i' to Fetch
.PP
.Vb 1
\&    ($data) = $gram\->Fetch(\*(Aqdata\-i\*(Aq);
.Ve
.PP
will return a reference to the array of data
points for 'i'th record (starting from 0) in the seismogram object.
Similarly
.PP
.Vb 1
\&    $data = $gram\->data;
.Ve
.PP
will return a reference to the first record in the object.  \fBNote\fR
that this is an array \fBreference\fR, so changes to the array through
this reference change the data in the object.  In fact, a call to
Change is not needed to store the changes into the object.
.PP
This is often handy, but dangerous.  If you do not want changes
passed through automatically to the object, make a local copy of the
array
.PP
.Vb 1
\&    @datacopy = @$data;
.Ve
.PP
and work on this copy.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Seismogram::SAC and Seismogram::Helm
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Revision:\fR 1.2 $
.SH "AUTHOR"
.IX Header "AUTHOR"
Craig Scrivner
