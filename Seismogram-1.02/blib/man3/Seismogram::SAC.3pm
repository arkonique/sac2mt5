.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Seismogram::SAC 3pm"
.TH Seismogram::SAC 3pm "2019-01-22" "perl v5.26.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Seismogram::SAC \- class for SAC format seismogram objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Seismogram::SAC;
\&
\&    $gram   = new Seismogram::SAC (%initialvalues);
\&    $status = $gram\->Read($filehandle);
\&    $status = $gram\->Write($filehandle);
\&    $sac_gram = Translate SAC ($other_gram);
\&
\&    # The following are Seismogram::Seismogram methods
\&    # inherited by Seismogram::SAC
\&    @values = $gram\->Fetch(@headerkeys);
\&              $gram\->Change(%values);
\&    @grams  = Split Seismogram::SAC ($gram,$number);
\&    $gram   = Join Seismogram::SAC (@grams);
\&
\&    # Also any header variable name can act as a get/set function.
\&    # I.e.,
\&    $npts = $gram\->npts;
\&    $gram\->npts(2500);   # npts in seismogram header now 2500
\&
\&    # it may be necessary to set amplitude range in the header
\&    # I.e.,
\&    $gram\->store_range if $gram\->depmax == \-12345;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module extends the general \fBSeismogram::Seismogram\fR class to handle
Seismic Analysis Code (\s-1SAC\s0) format data.  \s-1SAC\s0 is a collection of tools to
work with seismic data, developed at Lawrence Livermore National Lab:
.PP
http://www\-ep.es.llnl.gov/tvp/sac.html
.PP
The format for seismic data expected by this code has become one of a few 
commonly used seismic data formats.
.PP
In this module there are methods to create \s-1SAC\s0 objects, read \s-1SAC\s0 objects
from disk, write \s-1SAC\s0 objects to disk, and translate \s-1SAC\s0 objects into other
seismogram formats.  The header variables defined for the \s-1SAC\s0 object are
those listed in the \s-1SAC\s0 manual:
.PP
http://www\-ep.es.llnl.gov/tvp/sac_manual/users_manual6.html
.PP
Note that default null values in \s-1SAC\s0 format are \-12345 in either
integer, float, or string representations.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 2
\&    Create a SAC object with default null values or (optionally) some
\&    initial values.
\&
\&    Usage: $gram = Seismogram::SAC\->new(%initialvalues);
\&
\&    Arguments:
\&
\&        %initialvalues \- (optional) an associative array with header
\&                         variable name and value pairs.  This can also
\&                         include a \*(Aqdata\*(Aq key and data array reference
\&                         to load waveform data into the object.
\&
\&    Return:
\&
\&        $gram          \- a Seismogram::SAC object
.Ve
.SS "Read"
.IX Subsection "Read"
.Vb 1
\&    Read a SAC format file and load into the Seismogram::SAC object.
\&
\&    Usage: $status = $gram\->Read($filehandle);
\&
\&    Argument:
\&
\&        $filehandle \- a reference to a file handle to a SAC format file,
\&                      open for reading.  See the IO::File manpage for
\&                      information on opening file handle references.
\&
\&    Return:
\&
\&        $status     \- status of the attempted read operation.  1 if
\&                      successful. 0 if failed.
.Ve
.SS "Write"
.IX Subsection "Write"
.Vb 1
\&    Write a SAC format file with data from the Seismogram::SAC object
\&
\&    Usage: $status = $gram\->Write($filehandle);
\&
\&    Argument:
\&
\&        $filehandle \- a reference to a file handle to a SAC format file,
\&                      open for writing.
\&
\&    Return:
\&
\&        $status     \- status of the attempted write operation.  1 if
\&                      successful.  0 if failed.
.Ve
.SS "Translate"
.IX Subsection "Translate"
.Vb 2
\&    Translate another kind of Seismogram:: object into a Seismogram::SAC
\&    object.
\&
\&    Usage: $sac_gram = Translate Seismogram::SAC ($other_gram);
\&
\&    Argument:
\&
\&        Seismogram::SAC \- this string verbatim
\&        $other_gram     \- Seismogram:: object of some type other than
\&                          Seismogram::SAC.
\&
\&    Return:
\&
\&        $sac_gram       \- a Seismogram::SAC object
\&
\&    Comment:
\&
\&        The first argument of this method directs the perl interpreter
\&        to use the Translate method from the Seismogram::SAC class, so 
\&        the output will be a Seismogram::SAC object.
.Ve
.SS "store_range"
.IX Subsection "store_range"
.Vb 3
\&    New SAC files extracted from a SEED or miniSEED file often don\*(Aqt
\&    have depmin and depmax values set in the header.  The store_range
\&    function will set these based on the current data in the SAC object.
\&
\&    Usage: $sac_gram\->store_range($trace);
\&
\&    Argument:
\&
\&        $trace  \- the index of the trace (in a multi\-trace object) to
\&                  be fixed.  The argument is optional.  If not given
\&                  the first trace (index 0) is assumed.
\&
\&    Return:
\&
\&        none
\&
\&    Comment:
\&
\&        Looping through the data to determine the data to determine
\&        the amplitude range is an expensive operation for a large trace.
\&        It is best to check whether the process is needed with some code
\&        like
\&
\&            $gram\->store_range if $gram\->depmax == \-12345
\&
\&        using the default header value as an indicator the header is
\&        not yet correctly set.
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Seismogram::Seismogram
.SH "VERSION"
.IX Header "VERSION"
\&\f(CW$Revision:\fR 1.2 $
.SH "AUTHOR"
.IX Header "AUTHOR"
Craig Scrivner
