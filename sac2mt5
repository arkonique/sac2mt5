#!/bin/bash

rm temp

cat<<!
sac2mt5 v1.3
SAC to DSN format converter.
Please see help for all options and usage. Help can be accessed by -h or --help

!


red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
blue=`tput setaf 4`
bold=$(tput bold)
normal=$(tput sgr0)
underline=$(tput smul)

help(){
cat<<!
---

${red}sac2mt5${normal} is an abstraction layer for the SACtoDSN.pl perl script written by McCaffrey available at ${blue}${underline}http://www.geology.cwu.edu/facstaff/walter/mt5/SACtoDSN.pl${normal}

${bold}${yellow}Usage:${normal} 
    sac2mt5 ${green}[-d/--directory<data directory>] [-o/--output<output file>] [-t/--date <YYMMDDHHmmss.s = date and time>] [-l/--latlong <LAT/LONG>] [-n/--depth <event depth>] [-h/--help]${normal}

${bold}${yellow}Options:${normal}
    -d/--directory   Specify the directory containing all the SAC files. 
                     This directory must also contain a subdirectory called RESP containing all the instrument response files

    -o/--output      Specify the name of the output DSN file. This will be created inside the data directory. Do not include the filename extension.

    -t/--date        Specify the date and time in YY/MM/DD/HH/mm/ss.s format

    -l/--latlong     Specify the latitude and longitude of the event in LAT/LON format

    -n/--depth       Specify the depth of the event in km

    -h/--help        Display this help


${bold}${red}NOTE:${normal}

1. Please make the required libraries and make sure all the paths are specified correctly in the perl script SACtoDSN.pl
2. Before using this script please make sure to install the three libraries provided along with this
3. Additional paths might need to be changed based on your TauP installation. Check where your ".tvel" files are within your installation. Put in the required directory name in TauP.pm inside Taup-0.01


!
}

d_flag=0;
o_flag=0;
t_flag=0;
l_flag=0;
n_flag=0;
while getopts ":d:o:t:l:n:h-:" opt; do
	case $opt in
		-)
			case "${OPTARG}" in
				directory)
					val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    			if [ "${val}" == '' ]; then
                    				printf "Option --directory requires an argument.\nExiting...\n"
                    				exit 1;
                    			else
                        			echo "Data directory is: '${val}'" >&2;
                        			dir=${val};
                    			fi
                    			d_flag=1;
                    			;;
                		output)
		    			val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    			if [ "${val}" == '' ]; then
                    				printf "Option --output requires an argument.\nExiting...\n"
                    				exit 1;
                    			else
                        			echo "Output file basename is: '${val}'" >&2;
                        			output=${val};
                    			fi
                    			o_flag=1;
                    			;;
				date)
		    			val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    			if [ "${val}" == '' ]; then
                    				printf "Option --date requires an argument.\nExiting...\n"
                    				exit 1;
                    			else
                        			echo "Event date and time is: $(echo $val | awk -F/ '{print $1"/"$2"/"$3" "$4":"$5":"$6}')" >&2;
                        			otime=${val}
                        			time=`echo ${val} | awk -F/ '{print $1$2$3$4$5$6}'`;
                    			fi
                    			t_flag=1;
                    			;;

				latlong)
		    			val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    			if [ "${val}" == '' ]; then
                    				printf "Option --latlong requires an argument.\nExiting...\n"
                    				exit 1;
                    			else
                        			echo "Event lat/long is: '${val}'" >&2;
                        			olat=`echo ${OPTARG} | awk -F/ '{print $1}'`
                        			olon=`echo ${OPTARG} | awk -F/ '{print $2}'`
                        			lat=`echo ${val} | awk -F/ '{print $1}' | awk -F. '{print $1 substr($2,0,2)}'`;
                        			lon=`echo ${val} | awk -F/ '{print $2}' | awk -F. '{print $1 substr($2,0,2)}'`;
                    			fi
                    			l_flag=1;
                    			;;
                		depth)
		    			val="${!OPTIND}"; OPTIND=$(( $OPTIND + 1 ))
                    			if [ "${val}" == '' ]; then
                    				printf "Option --depth requires an argument.\nExiting...\n"
                    				exit 1;
                    			else
                        			echo "Event depth is: '${val}'" >&2;
                        			evdp=${val};
                        			odp=$evdp;
									evdp=`echo $evdp | awk '{print ($1-int($1)>=0.5)?int($1)+1:int($1)}'`
                    			fi
                    			n_flag=1;
                    			;;

       				help)
					help >&2
					o_flag=1;
					d_flag=1;
					t_flag=1;
					l_flag=1;
					n_flag=1;
					exit 1
					;;
            esac
			;;
		d)
			echo "Data directory is: $OPTARG" >&2
			dir=$OPTARG;
			d_flag=1;
			;;
		o)
			echo "Output file basename is: $OPTARG" >&2
			output=$OPTARG;
			o_flag=1;
			;;
		t)
			echo "Event date and time is: $(echo $OPTARG | awk -F/ '{print $1"/"$2"/"$3" "$4":"$5":"$6}')" >&2;
			otime=${OPTARG};
            time=`echo ${OPTARG} | awk -F/ '{print $1$2$3$4$5$6}'`;
			t_flag=1;
			;;
		l)
			echo "Event lat/long is: '${OPTARG}'" >&2;
			olat=`echo ${OPTARG} | awk -F/ '{print $1}'`
			olon=`echo ${OPTARG} | awk -F/ '{print $2}'`
            lat=`echo ${OPTARG} | awk -F/ '{print $1}' | awk -F. '{print $1 substr($2,0,2)}'`;
            lon=`echo ${OPTARG} | awk -F/ '{print $2}' | awk -F. '{print $1 substr($2,0,2)}'`;
			l_flag=1;
			;;
		n)
            echo "Event depth is: '${OPTARG}'" >&2;
            evdp=${OPTARG};
            odp=$evdp
			evdp=`echo $evdp | awk '{print ($1-int($1)>=0.5)?int($1)+1:int($1)}'`
			n_flag=1;
			;;
		\?)
		    printf "Invalid option: -$OPTARG.\nExiting...\n" >&2
		    exit 1
		    ;;
		:)
		    printf "Option -$OPTARG requires an argument.\nExiting...\n" >&2
		    exit 1
		    ;;
		h)
			help >&2
			o_flag=1;
			d_flag=1;
			exit 1
			;;
	esac
done

if [ $# -eq 0 ]
then
	help;
fi
if [ $d_flag -eq 0 ];
then
	read -p "Enter data directory: " dir;
fi
if [ $o_flag -eq 0 ];
then
	read -p "Enter output DSN file name (without extension): " output;
fi
if [ $t_flag -eq 0 ];
then
	read -p "Enter event date and time (YY/MM/DD/hh/mm/ss.s): " time;
	otime=$time
	time=`echo ${time} | awk -F/ '{print $1$2$3$4$5$6}'`
fi
if [ $l_flag -eq 0 ];
then
	read -p "Enter event latitude: " lat;
	read -p "Enter event longitude: " lon;
	olat=$lat
	olon=$lon
	lat=`echo ${lat} | awk -F. '{print $1 substr($2,0,2)}'`;
    lon=`echo ${lon} | awk -F. '{print $1 substr($2,0,2)}'`;
fi
if [ $n_flag -eq 0 ];
then
	read -p "Enter event depth: " evdp;
	odp=$evdp
	evdp=`echo $evdp | awk '{print ($1-int($1)>=0.5)?int($1)+1:int($1)}'`
fi
read -p "Input channel type (BH,LH,etc.): " chan

echo "Selecting usable files..."
echo "Output files will be created in ${dir}/selected_s2m/"
echo
echo "Selecting files with a P(T1) and S(T2) marker and with E>=60+T2"
echo

echo $time $lat $lon $evdp 0 0 > temp



orig=`date --date="$(echo $otime | awk -F/ '{print $1}')-$(echo $otime | awk -F/ '{print $2}')-$(echo $otime | awk -F/ '{print $3}') $(echo $otime | awk -F/ '{print $4}'):$(echo $otime | awk -F/ '{print $5}'):$(echo $otime | awk -F/ '{print $6}')" --utc +%4Y" "%3j" "%2H" "%2M" "%2S" "%3N`
echo $orig

copy_sac2mt5 $olat $olon $odp "$orig"<<!
$dir
!

dir1=$dir
dir=${dir1}/selected_s2m


cp $dir/*.SAC .
cp $dir/RESP/RESP.* .
echo 

n_total_p=`ls *${chan}Z*.SAC | awk -F. '{print $8}' | sort | uniq | wc -l`
echo $(tput setaf 4)${n_total_p}$(tput sgr0)
if [ $n_total_p -gt 100 ]; then
	n_total=`echo $n_total_p | awk '{print int($1/100)}'`
	for i in $(seq 1 $n_total); do
 		j=$((i*100));
 		left=(`ls *${chan}Z*.SAC | awk -F. '{print $8}' | sort | uniq | head -n$j | tail -n100`);
 		str=""
 		for k in ${left[*]}; do
			str=$str" "`ls *.$k.*${chan}Z*.SAC | head -n1`;
		done
		echo $str
		echo "$(tput bold)Input string:$(tput sgr0) "$str 
		SACtoDSN.pl --input $str --output ${output}P${i}.DSN
		cat temp ${output}P$((i)).DSN > temp2
 		mv temp2 ${output}P$((i)).DSN
 		cp ${output}P${i}.DSN $dir
 	done
 	lll=`ls *${chan}Z*.SAC | awk -F. '{print $8}' | sort | uniq | wc -l | awk -vn=$n_total '{print $1-(n*100)}'`
 	left=(`ls *${chan}Z*.SAC | awk -F. '{print $8}' | sort | uniq | tail -n$lll`)
 	str=""
	for j in ${left[*]}; do
		str=$str" "`ls *.$j.*${chan}Z*.SAC | head -n1`;
	done
	echo "$(tput bold)Input string:$(tput sgr0) "$str 
	SACtoDSN.pl --input $str --output ${output}P0.DSN
	cat temp ${output}P0.DSN > temp2
	mv temp2 ${output}P0.DSN
	cp ${output}P0.DSN $dir
else
	left=(`ls *${chan}Z*.SAC | awk -F. '{print $8}' | sort | uniq`);
	str=""
	for j in ${left[*]}; do
		str=$str" "`ls *.$j.*${chan}Z*.SAC | head -n1`;
	done
	echo "$(tput bold)Input string:$(tput sgr0) "$str 
	SACtoDSN.pl --input $str --output ${output}P0.DSN
	cat temp ${output}P0.DSN > temp2
	mv temp2 ${output}P0.DSN
	cp ${output}P0.DSN $dir
fi



total_s=(`ls *${chan}E*.SAC *${chan}N*.SAC | awk -F. '{print $8}' | sort | uniq`)

str=""
for i in ${total_s[*]}; do
	if [ -e *.${i}.*${ch}E*.SAC ] && [ -e *.${i}.*${ch}N*.SAC ]; then
		a=`ls *.${i}.*${ch}E*.SAC | head -n1`
		b=`ls *.${i}.*${ch}N*.SAC | head -n1`
		str=$str" "$a" "$b
	fi
done

n_total_s=`echo $str | awk '{print NF/2}'`

if [ $n_total_s -gt 50 ]; then
	n_total=`echo $str | awk '{print 100*int(NF/100)}'`
	z=1;
	for j in $(seq 1 100 $n_total); do
		k=$((j+99))
		n_str=`echo $str | cut -d " " -f ${j}-${k}`
		echo "$(tput bold)Input string:$(tput sgr0) "$str 
		SACtoDSN.pl --input $n_str --output ${output}S${z}.DSN
		cat temp ${output}S${z}.DSN > temp2
		mv temp2 ${output}S${z}.DSN
		cp ${output}S${z}.DSN $dir
		z=$((z+1))
	done
	nnn=$((n_total+1))
	n_str=`echo $str | cut -d " " -f $nnn-10000`
	echo "$(tput bold)Input string:$(tput sgr0) "$str 
	SACtoDSN.pl --input $n_str --output ${output}S0.DSN
	cat temp ${output}S0.DSN > temp2
	mv temp2 ${output}S0.DSN
	cp ${output}S0.DSN $dir
else
	echo "$(tput bold)Input string:$(tput sgr0) "$str 
	SACtoDSN.pl --input $str --output ${output}S0.DSN
	cat temp ${output}S0.DSN > temp2
	mv temp2 ${output}S0.DSN
	cp ${output}S0.DSN $dir
fi

<<c
n_total=`ls *${chan}Z*.SAC | wc -l | awk '{print int($1/100)}'`
for i in $(seq 1 $n_total); do
 j=$((i*100));
 files=`ls *${chan}Z*.SAC | head -n$j | tail -n100`;
 str=`echo $files`;
 SACtoDSN.pl --input $str --output ${output}${i}.DSN
 cat temp ${output}P$((i)).DSN > temp2
 mv temp2 ${output}P$((i)).DSN
 cp ${output}P${i}.DSN $dir
done
left=`ls *${chan}Z*.SAC | wc -l | awk -vn=$n_total '{print $1-(n*100)}'`
f=`ls *${chan}Z*.SAC | tail -n$left`
str=`echo $f`
SACtoDSN.pl --input $str --output ${output}P$((i+1)).DSN
cat temp ${output}P$((i+1)).DSN > temp2
mv temp2 ${output}P$((i+1)).DSN
cp ${output}P$((i+1)).DSN $dir

n_total=`ls *${chan}N*.SAC *${chan}E*.SAC | wc -l | awk '{print int($1/100)}'`
for i in $(seq 1 $n_total); do
 j=$((i*100));
 files=`ls *${chan}N*.SAC *${chan}E*.SAC | head -n$j | tail -n100`;
 str=`echo $files`;
 SACtoDSN.pl --input $str --output ${output}${i}.DSN
 cat temp ${output}S$((i)).DSN > temp2
 mv temp2 ${output}S$((i)).DSN
 cp ${output}S${i}.DSN $dir
done
left=`ls *${chan}N*.SAC *${chan}E*.SAC | wc -l | awk -vn=$n_total '{print $1-(n*100)}'`
f=`ls *${chan}N*.SAC *${chan}E*.SAC | tail -n$left`
str=`echo $f`
SACtoDSN.pl --input $str --output ${output}S$((i+1)).DSN
cat temp ${output}S$((i+1)).DSN > temp2
mv temp2 ${output}S$((i+1)).DSN
cp ${output}S$((i+1)).DSN $dir
c

if [[ "$dir" = "." ]]; then
	echo
else
	rm *.SAC
	rm RESP.*
	rm ${output}*
fi
rm temp
